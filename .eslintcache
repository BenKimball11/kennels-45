[{"/Users/BenKimball/workspace/kennels/src/index.js":"1","/Users/BenKimball/workspace/kennels/src/reportWebVitals.js":"2","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalCard.js":"3","/Users/BenKimball/workspace/kennels/src/components/Kennel.js":"4","/Users/BenKimball/workspace/kennels/src/components/ApplicationViews.js":"5","/Users/BenKimball/workspace/kennels/src/components/Home.js":"6","/Users/BenKimball/workspace/kennels/src/components/nav/NavBar.js":"7","/Users/BenKimball/workspace/kennels/src/components/PropsAndState.js":"8","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalList.js":"9","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalProvider.js":"10","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalForm.js":"11","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeProvider.js":"12","/Users/BenKimball/workspace/kennels/src/components/customer/CustomerList.js":"13","/Users/BenKimball/workspace/kennels/src/components/location/LocationProvider.js":"14","/Users/BenKimball/workspace/kennels/src/components/customer/CustomerProvider.js":"15","/Users/BenKimball/workspace/kennels/src/components/location/LocationList.js":"16","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeList.js":"17","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeCard.js":"18","/Users/BenKimball/workspace/kennels/src/components/location/LocationCard.js":"19","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeForm.js":"20","/Users/BenKimball/workspace/kennels/src/components/location/LocationForm.js":"21","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalDetail.js":"22","/Users/BenKimball/workspace/kennels/src/components/customer/CustomerCard.js":"23"},{"size":861,"mtime":1611337599473,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1611171824723,"results":"26","hashOfConfig":"25"},{"size":394,"mtime":1611673977921,"results":"27","hashOfConfig":"25"},{"size":1810,"mtime":1611629158398,"results":"28","hashOfConfig":"25"},{"size":2826,"mtime":1611689299298,"results":"29","hashOfConfig":"25"},{"size":412,"mtime":1611243643971,"results":"30","hashOfConfig":"25"},{"size":886,"mtime":1611242588703,"results":"31","hashOfConfig":"25"},{"size":493,"mtime":1611245037103,"results":"32","hashOfConfig":"25"},{"size":1386,"mtime":1611629327804,"results":"33","hashOfConfig":"25"},{"size":1568,"mtime":1611688664810,"results":"34","hashOfConfig":"25"},{"size":4907,"mtime":1611629025297,"results":"35","hashOfConfig":"25"},{"size":1218,"mtime":1611595564796,"results":"36","hashOfConfig":"25"},{"size":754,"mtime":1611697928193,"results":"37","hashOfConfig":"25"},{"size":1200,"mtime":1611595583012,"results":"38","hashOfConfig":"25"},{"size":1205,"mtime":1611595543115,"results":"39","hashOfConfig":"25"},{"size":1034,"mtime":1611684051059,"results":"40","hashOfConfig":"25"},{"size":3631,"mtime":1611683000134,"results":"41","hashOfConfig":"25"},{"size":360,"mtime":1611679352485,"results":"42","hashOfConfig":"25"},{"size":279,"mtime":1611679883289,"results":"43","hashOfConfig":"25"},{"size":2911,"mtime":1611683244264,"results":"44","hashOfConfig":"25"},{"size":2921,"mtime":1611683890502,"results":"45","hashOfConfig":"25"},{"size":1244,"mtime":1611690460049,"results":"46","hashOfConfig":"25"},{"size":281,"mtime":1611697923654,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"8okl3d",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/BenKimball/workspace/kennels/src/index.js",[],["99","100"],"/Users/BenKimball/workspace/kennels/src/reportWebVitals.js",[],"/Users/BenKimball/workspace/kennels/src/components/animal/AnimalCard.js",[],"/Users/BenKimball/workspace/kennels/src/components/Kennel.js",[],"/Users/BenKimball/workspace/kennels/src/components/ApplicationViews.js",[],"/Users/BenKimball/workspace/kennels/src/components/Home.js",[],"/Users/BenKimball/workspace/kennels/src/components/nav/NavBar.js",[],"/Users/BenKimball/workspace/kennels/src/components/PropsAndState.js",[],"/Users/BenKimball/workspace/kennels/src/components/animal/AnimalList.js",["101"],"import React, { useContext, useEffect } from \"react\"\nimport { AnimalContext } from \"./AnimalProvider\"\nimport { LocationContext } from \"../location/LocationProvider\"\nimport { CustomerContext } from \"../customer/CustomerProvider\"\nimport { AnimalCard } from \"./AnimalCard\"\nimport \"./Animal.css\"\nimport { useHistory } from \"react-router-dom\"\n\nexport const AnimalList = () => {\n    const { animals, getAnimals } = useContext(AnimalContext)\n    const { locations, getLocations } = useContext(LocationContext)\n    const { customers, getCustomers } = useContext(CustomerContext)\n    const history = useHistory()\n\n    useEffect(() => {\n        console.log(\"AnimalList: Initial render before data\")\n        getLocations()\n        .then(getCustomers)\n        .then(getAnimals)\n    }, [])\n\n    \n\n \n      return(\n        <div className=\"animals\">\n          <h2>Animals</h2>\n\t\t      <button onClick={() => {history.push(\"/animals/create\")}}>\n            Add Animal\n          </button>\n        \n        {\n        animals.map(animal => {\n              const owner = customers.find(c => c.id === animal.customerId)\n              const location = locations.find(l => l.id === animal.locationId)\n\n        \n              return <AnimalCard key={animal.id}\n                location={location}\n                customer={owner}\n                animal={animal} />\n        })\n          }\n        </div>\n    )\n}\n","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalProvider.js",[],"/Users/BenKimball/workspace/kennels/src/components/animal/AnimalForm.js",["102"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { LocationContext } from \"../location/LocationProvider\"\nimport { AnimalContext } from \"../animal/AnimalProvider\"\nimport { CustomerContext } from \"../customer/CustomerProvider\"\nimport \"./Animal.css\"\nimport { useHistory } from 'react-router-dom';\n\nexport const AnimalForm = () => {\n    const { addAnimal } = useContext(AnimalContext)\n    const { locations, getLocations } = useContext(LocationContext)\n    const { customers, getCustomers } = useContext(CustomerContext)\n\n    /*\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\n\n    Define the intial state of the form inputs with useState()\n    */\n\n    const [animal, setAnimal] = useState({\n      name: \"\",\n      breed: \"\",\n      locationId: 0,\n      customerId: 0\n    });\n\n    const history = useHistory();\n\n    /*\n    Reach out to the world and get customers state\n    and locations state on initialization, so we can provide their data in the form dropdowns\n    */\n    useEffect(() => {\n      getCustomers().then(getLocations)\n    }, [])\n\n    //when a field changes, update state. The return will re-render and display based on the values in state\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n      /* When changing a state object or array,\n      always create a copy, make changes, and then set state.*/\n      const newAnimal = { ...animal }\n      let selectedVal = event.target.value\n      // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\n      if (event.target.id.includes(\"Id\")) {\n        selectedVal = parseInt(selectedVal)\n      }\n      /* Animal is an object with properties.\n      Set the property to the new value\n      using object bracket notation. */\n      newAnimal[event.target.id] = selectedVal\n      // update state\n      setAnimal(newAnimal)\n    }\n\n    const handleClickSaveAnimal = (event) => {\n      event.preventDefault() //Prevents the browser from submitting the form\n\n      const locationId = animal.locationId\n      const customerId = animal.customerId\n\n      if (locationId === 0 || customerId === 0) {\n        window.alert(\"Please select a location and a customer\")\n      } else {\n        //invoke addAnimal passing animal as an argument.\n        //once complete, change the url and display the animal list\n        addAnimal(animal)\n        .then(() => history.push(\"/animals\"))\n      }\n    }\n\n    return (\n      <form className=\"animalForm\">\n          <h2 className=\"animalForm__title\">New Animal</h2>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Animal name:</label>\n                  <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Animal name\" value={animal.name}/>\n              </div>\n          </fieldset>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"breed\">Animal breed:</label>\n                  <input type=\"text\" id=\"breed\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Animal breed\" value={animal.breed}/>\n              </div>\n          </fieldset>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"location\">Assign to location: </label>\n                  <select defaultValue={animal.locationId} name=\"locationId\" id=\"locationId\" onChange={handleControlledInputChange} className=\"form-control\" >\n                      <option value=\"0\">Select a location</option>\n                      {locations.map(l => (\n                          <option key={l.id} value={l.id}>\n                              {l.name}\n                          </option>\n                      ))}\n                  </select>\n              </div>\n          </fieldset>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"customerId\">Customer: </label>\n                  <select defaultValue={animal.customerId} name=\"customer\" id=\"customerId\" onChange={handleControlledInputChange} className=\"form-control\" >\n                      <option value=\"0\">Select a customer</option>\n                      {customers.map(c => (\n                          <option key={c.id} value={c.id}>\n                              {c.name}\n                          </option>\n                      ))}\n                  </select>\n              </div>\n          </fieldset>\n          <button className=\"btn btn-primary\"\n            onClick={handleClickSaveAnimal}>\n            Save Animal\n          </button>\n      </form>\n    )\n}","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeProvider.js",[],"/Users/BenKimball/workspace/kennels/src/components/customer/CustomerList.js",["103"],"/Users/BenKimball/workspace/kennels/src/components/location/LocationProvider.js",[],"/Users/BenKimball/workspace/kennels/src/components/customer/CustomerProvider.js",[],"/Users/BenKimball/workspace/kennels/src/components/location/LocationList.js",["104"],"import React, { useContext, useEffect } from \"react\"\nimport { LocationContext } from \"./LocationProvider\"\nimport { LocationCard } from \"./LocationCard\"\nimport \"./Location.css\"\nimport { useHistory } from \"react-router-dom\"\n\nexport const LocationList = () => {\n  // This state changes when `getAnimals()` is invoked below\n  const { locations, getLocations } = useContext(LocationContext)\n\n  //useEffect - reach out to the world for something\n  useEffect(() => {\n    console.log(\"LocationList: useEffect - getLocations\")\n    getLocations()\n\n  }, [])\n\n  const history = useHistory()\n\n  return (\n    <>\n     <h2>Locations</h2>\n            <button onClick={() => {history.push(\"/locations/create\")}}>\n                Add Location\n            </button>\n        <div className=\"locations\"></div>\n    <div className=\"locations\">\n      {console.log(\"LocationList: Render\", locations)}\n      {\n        locations.map(location => {\n          return <LocationCard key={location.id} location={location} />\n        })\n      }\n    </div>\n    </>\n  )\n}","/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeList.js",[],"/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeCard.js",[],"/Users/BenKimball/workspace/kennels/src/components/location/LocationCard.js",[],"/Users/BenKimball/workspace/kennels/src/components/employee/EmployeeForm.js",[],"/Users/BenKimball/workspace/kennels/src/components/location/LocationForm.js",["105"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { LocationContext } from './LocationProvider'\n\n\nexport const LocationForm = () => {\n    \n    const { location, getLocations, addLocation } = useContext(LocationContext)\n    /*\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\n    Define the intial state of the form inputs with useState()\n    */\n\n    const [locationAdd, setLocation] = useState({\n      name: \"\",\n      address: \"\",\n    });\n\n    const history = useHistory();\n\n    /*\n    Reach out to the world and get customers state\n    and locations state on initialization.\n    */\n    useEffect(() => {\n      getLocations()\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n\n\n    //when a field changes, update state. The return will re-render and display based on the values in state\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n      /* When changing a state object or array,\n      always create a copy, make changes, and then set state.*/\n      const newLocation = { ...locationAdd }\n      /* Animal is an object with properties.\n      Set the property to the new value\n      using object bracket notation. */\n      newLocation[event.target.id] = event.target.value\n      // update state\n      setLocation(newLocation)\n    }\n\n    const handleClickSaveLocation = (event) => {\n      event.preventDefault() //Prevents the browser from submitting the form\n    \n      const locationInput = document.getElementById(\"name\").value\n      const addressInput = document.getElementById(\"address\").value\n      \n      if (locationInput === \"\" || addressInput === \"\") {\n        window.alert(\"Please enter a location name as well and address\")\n      } else {\n        addLocation(locationAdd)\n        .then(() => history.push(\"/locations\"))\n      }\n    }\n\n    return (\n      <form className=\"locationForm\">\n          <h2 className=\"locationForm__title\">New Location</h2>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Location name: </label>\n                  <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Location name\" value={locationAdd.name}/>\n              </div>\n          </fieldset>\n          <fieldset>\n              <div className=\"form-group\">\n                  <label htmlFor=\"name\">Address: </label>\n                  <input type=\"text\" id=\"address\" onChange={handleControlledInputChange} required className=\"form-control\" placeholder=\"Address\" value={locationAdd.address}/>\n              </div>\n          </fieldset>\n          \n          <button className=\"btn btn-primary\"\n            onClick={handleClickSaveLocation}>\n            Save Location\n          </button>\n      </form>\n    )\n}","/Users/BenKimball/workspace/kennels/src/components/animal/AnimalDetail.js",["106"],"/Users/BenKimball/workspace/kennels/src/components/customer/CustomerCard.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":20,"column":8,"nodeType":"113","endLine":20,"endColumn":10,"suggestions":"114"},{"ruleId":"111","severity":1,"message":"115","line":34,"column":8,"nodeType":"113","endLine":34,"endColumn":10,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"117","line":15,"column":6,"nodeType":"113","endLine":15,"endColumn":8,"suggestions":"118"},{"ruleId":"111","severity":1,"message":"119","line":16,"column":6,"nodeType":"113","endLine":16,"endColumn":8,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":8,"column":13,"nodeType":"123","messageId":"124","endLine":8,"endColumn":21},{"ruleId":"111","severity":1,"message":"125","line":28,"column":8,"nodeType":"113","endLine":28,"endColumn":10,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAnimals', 'getCustomers', and 'getLocations'. Either include them or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has missing dependencies: 'getCustomers' and 'getLocations'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["132"],"no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'animalId' and 'getAnimalById'. Either include them or remove the dependency array.",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [getAnimals, getCustomers, getLocations]",{"range":"144","text":"145"},"Update the dependencies array to be: [getCustomers, getLocations]",{"range":"146","text":"147"},"Update the dependencies array to be: [getCustomers]",{"range":"148","text":"149"},"Update the dependencies array to be: [getLocations]",{"range":"150","text":"151"},"Update the dependencies array to be: [animalId, getAnimalById]",{"range":"152","text":"153"},[773,775],"[getAnimals, getCustomers, getLocations]",[1136,1138],"[getCustomers, getLocations]",[499,501],"[getCustomers]",[543,545],"[getLocations]",[722,724],"[animalId, getAnimalById]"]